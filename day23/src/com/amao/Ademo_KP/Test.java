package com.amao.Ademo_KP;

/**
 *  @Author : ItAmao
 *  @Date   : 2020/6/30 20:24
 */
public class Test {
    /**
     *  网络编程
     *      1.软件结构
     *          B/S结构 browser/server
     *              优点:开发与维护比较简单方便
     *              缺点:对网络要求极高
     *
     *          C/S结构:client/server
     *              优点:对网络的要求不高
     *              缺点:开发和维护开销比较大,占用硬盘和内存
     *
     *      2.网络编程的三要素
     *
     *          1.IP地址:IP地址是我们网络上计算机的唯一标识
     *                IPv4:是一个32位的二进制,通常被分为4个字节
     *                IPv6:采用128位地址长度,每16个字节一组,8组16进制
     *                本机IP:127.0.0.1/localhost
     *
     *          2.端口号:端口号是我们进程的唯一标识,端口号的范围0-65535,0-1023的范围一般被系统程序占用
     *                一个端口号只能使用一次,我们要使用1023以后的端口号,并且不能和别的软件重复
     *
     *          3.网络通信协议:协议是数据传输的方式
     *          什么是网络通信协议? 在互联网上进行数据交互所需要遵循的规则
     *              TCP协议:(传输控制协议)
     *                      TCP主要用于数据交互,其底层有四层分层模型
     *                      IP协议:因特网互联协议
     *
     *                      面向连接的,效率低,传输安全,
     *                      三次握手:TCP使用三次握手来保证安全性
     *                              第一次握手:客户端向服务端发送连接请求,等待服务端确认.
     *                              第二次握手:服务端向客户端回送一个响应,通知客户端收到了连接请求
     *                              第三次握手:客户端再次向服务端发送确认信息,确认连接.
     *
     *                      四次挥手:
     *                          第一次挥手:客户端进程发送连接释放报文,并且停止发送数据
     *                          第二次挥手:服务器收到连接释放报文,发送确认报文
     *                          第三次挥手:客户端收到服务器的确认请求,此时,客户端进入等待状态,等待服务器发送连接释放报文
     *                          第四次挥手:服务器将最后的数据发送完毕后,就像客户端发送连接释放报文,此时服务端进入等待状态,等待客户端的确认
     *                          客户端收到服务器的连接释放报文之后,必须发出确认,此时进入关闭状态
     *                          服务端只要收到客户端发出的确认,立即进入关闭状态
     *
     *              UDP协议:
     *                      面向无连接,效率高,传输不安全,每个数据包最大的是64k
     *
     *------------------------------------------------------------------------------------------------------------
     *  InetAddress
     *      1.概述
     *          代表IP地址的类
     *      2.静态方法
     *          public static InetAddress getLocalHost();//获取本机的ip地址对象
     *          public static InetAddress getByName(String host) //获取其他主机的ip地址对象
     *      3.成员方法:
     *          public String getHostName(); 获取主机名
     *          public String getHostAddress();获取IP地址字符串
     *
     *------------------------------------------------------------------------------------------------------------
     *  TCP通信程序
     *      1.TCP通信分为客户端和服务端
     *          客户端:一般是指个人电脑
     *          服务端:一般是公司用于提供服务的大型电脑
     *
     *      2.TCP中两个重要的类
     *          Socket类:代表客户端
     *          ServerSocket:代表服务端类
     *
     *      3.Socket类的介绍和使用
     *          构造方法
     *              public Socket(String serverIp,int serverPort);//创建客户端对象,指定要连接的服务器的IP和端口
     *              ps:此构造底层干了很多事,
     *                  如果IP和端口号正确,且服务器可以连接,那么底层会自动通过三次握手建立连接
     *                  如果IP和端口号错误,或者服务器拒绝拦截,那么此构造会直接抛出异常
     *          常用方法:
     *              public OutputStream(): 获取连接通道中的输出流
     *              public InputStream getInputStream():获取连接通道中的输入流
     *              public void close() 关闭客户端,释放资源,断开连接
     *              public void shutdownOutput()://关闭连接通道的输出流
     *              public void shutdownInput() //关闭连接通道的输入流
     *
     *      4.ServerSocket类的介绍和使用
     *          构造方法
     *              public ServerSocket(int port) //创建服务器,并指定其运行的端口
     *          常用方法
     *              public void close() //关闭服务器.释放资源
     *              public Socket accept() //接收连接到服务器客户端对象
     *
     * ------------------------------------------------------------------------------------------------------------
     * 网络编程
     *  1.概述
     *      a.Java是Internet上的语言,它从语言级上提供了对网络应用程序的支持,程序员能够很容易开发常见的网络应用程序
     *      b.Java提供的网络类库，可以实现无痛的网络连接，联网的底层 细节被隐藏在
     *      Java 的本机安装系统里，由 JVM 进行控制。并 且 Java 实现了一个跨平台的网络库，
     *      程序员面对的是一个统一 的网络编程环境。
     *
     *  2.计算机网络
     *      把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规 模大、
     *      功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、 共享硬件、软件、数据信息等资源。
     *
     *  3.网络编程的目的:
     *      直接或间接地通过网络协议与其它计算机实现数据交换，进行通讯。
     *
     *  4.网络编程中有两个主要的问题:
     *      如何准确地定位网络上一台或多台主机;定位主机上的特定的应用
     *      找到主机后如何可靠高效地进行数据传输
     *
     *------------------------------------------------------------------------------------------------------------
     * 网络通信要素概述
     *      IP和端口号
     *      网络通信协议
     *          OSI参考模型     TCP/IP参考模型      TCP/IP参考模型各层对应的协议
     *             应用层          应用层             HTTP,FTP,Telnet,DNS
     *             表示层
     *             会话层
     *             传输层
     *             ------------------------------------------------------
     *             网络层         网络层                  TCP,UDP
     *             ------------------------------------------------------
     *             数据链路层     物理+数据链路层           Link
     *             物理层
     *
     *     IP 地址:InetAddress
     *          唯一的标识 Internet 上的计算机(通信实体)
     *           IP地址分类方式1:IPV4 和 IPV6
     *           IP地址分类方式2:公网地址(万维网使用)和私有地址(局域网使用)
     *
     *      传输层中有两个非常重要的协议
     *          传输控制协议  TCP
     *          用户数据报协议 UDP
     *
     *      TCP协议:(打电话)
     *          1.使用TCP协议前,需先建立TCP连接,形成传输数据通道
     *          2.传输前,采用"三次握手"方式,点对点通信,是可靠的
     *          3.TCP协议进行通信的两个应用进程:客户端、服务端
     *          4.在连接中可进行大数据量的传输
     *          5.传输完毕,需释放已建立的连接,效率低
     *          TCP四次挥手:
     *
     *      UDP协议:(看比赛,看春晚,发短信)
     *          1.将数据、源、目的封装成数据包,不需要进行建立连接 是不可靠的连接
     *          2.每个数据报的大小限制在64k以内
     *          3.发送不管对方是否准备好,接收方收到也不确认,故是不可靠的
     *          4.可以广播发送
     *          5.发送数据结束时无需释放资源,开销小,速度快
     *
     *------------------------------------------------------------------------------------------------------------
     *  JUnit
     *     1.概述
     *          junit是第三方提供的单元测试工具
     *
     *     2.常用注解
     *          1.注解
     *               @Test:测试   不能有参数和返回值 空参无返回值的方法
     *               @Before:在每个测试方法之前执行的方法
     *               @After: 在每个测试方法之后执行的方法
     *               @BeforeClass:静态方法,在类之前执行的方法,并只执行一次
     *               @AfterClass:静态方法,在类之后执行的方法,并只执行一次
     *
     *      3.断言
     *          1.作用:预判一个结果,如果我们的结果和预判的结果是一样的程序就通过
     *
     *------------------------------------------------------------------------------------------------------------
     *
     *
     *
     *
     *
     *
     *
     *
     */
    public static void main(String[] args) {

    }
}
