package com.amao.Ademo_KP;

public class Test {
    /**
     *  Lambda表达式
     *      1.标准格式
     *          (方法参数) -> {方法体/return 返回值};
     *
     *
     *      1.实现原理
     *          匿名内部类在编译的时候会产生一个class文件
     *          Lambda表达式在程序运行的时候会形成一个类
     *          1.在类中新增一个方法,这个方法的方法体就是Lambda表达式中的代码
     *          2.还会形成一个匿名内部类,实现接口,重写抽象方法
     *          3.在接口的重写方法中,会调用新生成的方法
     *
     *      2.省略格式:
     *          1.小括号内参数类型可以省略
     *          2.如果小括号内有且只有一个参数,则小括号可以省略
     *          3.如果大括号内有且只有一个语句,可以同时省略大括号,return关键字及语句分号(要一起去掉)
     *
     *      3.前提条件
     *          1.方法的参数或局部变量类型必须为接口才能使用Lambda
     *          2.接口中有且仅有一个抽象方法(只有一个抽象方法的接口,我们称为函数式接口,我们就能使用Lambda表达式)
     *              @FunctionalInterface 检测这个接口是不是只有一个抽象方法
     *
     *      4.Lambda和匿名内部类在使用上的区别
     *          a.所需的类型不一样
     *                  匿名内部类需要的类型可以是抽象类或者是接口
     *                  Lambda表达式来说,需要的类型必须是接口
     *          b.抽象方法的数量不一样
     *                  匿名内部类所需的接口抽象方法的数量随意
     *                  Lambada表达式所需的接口,只能有一个抽象方法
     *          c.实现原理不同
     *                  匿名内部类在编译后会形成class文件
     *                  Lambda表达式是在程序运行的时候,动态生成class
     *
     *---------------------------------------------------------------------------------------------------------------------
     *  Stream流
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     */
    public static void main(String[] args) {


        for(int i=0;i<=100;i++){
            System.out.println(i);
        }
    }
}
