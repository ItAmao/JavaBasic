package com.amao.Ademo_KP;

/**
 *  @Author : ItAmao
 *  @Date   : 2020/7/6 22:11
 */
public class Test01 {
    /**
     *  枚举:
     *      1.作用:
     *          枚举就是可以指定固定对象个数,如果有些类型的对象是固定的个数,可以定义成枚举
     *      2.格式:
     *          public enum Gender {
     *              MALE, FEMALE;
     *          }
     *      3.定义枚举的格式:
     *          类:class
     *          接口:interface
     *          注解:@interface
     *          枚举:enum
     *              public enum 枚举名{
     *                  MALE,FEMALE,YAO
     *              }
     *      4.枚举的本质:
     *          枚举本质实际上是一个类
     *          枚举项本质其实就是该类的一个对象
     *
     *-----------------------------------------------------------------------------------------------
     *  单例设计模式:
     *      1.什么叫单例:
     *          就是保证一个类只有一个对象
     *
     *      2.作用:
     *          如果一个类中只有一个对象,这个类就是单例的,可以使用单例设计模式
     *
     *      3.实现步骤:
     *          a.需要把构造方法设置成私有化
     *          b.在类的内部自己创建一个静态的本类对象
     *          c.提供一个静态的方法用于获取该对象
     *          d.别的类中想要获取对象可以通过调用这个类的静态方法获取
     *
     *      3.饿汉式:定义在本类对象是直接创建的
     *          饿汉式表示比较饥饿,着急创建出来这个对象
     *          优点:用这个空间去换时间,
     *      4.懒汉式:定义类型对象的变量,而是静态方法被调用时在创建
     *          懒汉式比较慵懒,什么时候获取对象,什么时候创建
     *          优点:用时间换取空间
     *      5.单例设计模式中final的作用
     *          饿汉模式中,为了不让反射给对象地址赋值,
     *
     *-----------------------------------------------------------------------------------------------
     *  多例设计模式
     *      1.概述:
     *          就是保证一个类只有指定个数的对象
     *      2.多例设计模式的实现步骤
     *          a.将构造方法设置私有化
     *          b.在本类中创建静态集合,保存多个对象
     *          c.在本类中提供一个静态方法,随机返回集合中某个对象
     *          d.在测试类中调用静态方法获取对象
     *
     *      1.作用:
     *          一个类可以有多个对象,创建固定对象,使用类中固定的对象
     *
     * -----------------------------------------------------------------------------------------------
     *  工厂设计模式
     *      1.介绍
     *          工厂可以用来创建对象,让专业的人去做专业的事情
     *
     *-----------------------------------------------------------------------------------------------
     *  正则表达式
     *      1.介绍
     *          正则表达式去对字符串做校验的表达式写法,在字符串需要一定的格式的时候,一般都使用正则表达式
     *      2.字符类:
     *          a.[]:一个[] 表示的是一个字符 []里面的内容就是字符可以出现的内容
     *              1. [abc]:代表a或者b，或者c字符中的一个。
     *              2. [^abc]:代表除a,b,c以外的任何字符。
     *              3. [a-z]:代表a-z的所有小写字符中的一个。
     *              4. [A-Z]:代表A-Z的所有大写字符中的一个。
     *              5. [0-9]:代表0-9之间的某一个数字字符。
     *              6. [a-zA-Z0-9]:代表a-z或者A-Z或者0-9之间的任意一个字符。
     *              7. [a-dm-p]:a 到 d 或 m 到 p之间的任意一个字符。
     *      3.逻辑运算符
     *          [a-z&&[^bcd]]:表示这个字符可以是a-z,但不能是bcd中任意一个字符
     *          [a|b|c]:表示这个字符是a或b或c
     *
     *      4.预定义字符
     *          ^:表示匹配字符的开头,
     *          $:表示匹配字符的结尾
     *          1. "." : 匹配任何字符。 不能匹配换行符
     *          2. "\d":任何数字[0-9]的简写;
     *          3. "\D":任何非数字[^0-9]的简写;
     *          4. "\s": 空白字符:[ \t\n\x0B\f\r] 的简写
     *          5. "\S": 非空白字符:[^\s] 的简写
     *          6. "\w":单词字符:[a-zA-Z_0-9]的简写
     *          7. "\W":非单词字符:[^\w]
     *          8. "\b":匹配的是单词的边界
     *
     *     5.数量词
     *         1. X? : 0次或1次
     * //      2. X* : 0次到多次
     * //      3. X+ : 1次或多次
     * //      4. X{n} : 恰好n次
     * //      5. X{n,} : 至少n次
     * //      6. X{n,m}: n到m次(n和m都是包含的)
     *
     *     6.分组括号
     *          ()
     *          非捕获分组 (?::表达式)
     *
     *     7.正向先行断言
     *          正向先行断言: (?=表达式) ,指在某个位置向右看,表示所在位置必须能匹配表达式
     *          (?=.*?[a-z])(?=.*?)[A-Z].+:表示匹配的字符串必须包含至少一个大写和小写的字母
     *          (?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).{8,}
     *
     *     8.反向先行断言
     *          (?!表达式)
     *          @(?!qq) 排除qq邮箱
     *
     *     9.正向后行断言
     *          (?<=表达式):即先行断言从左往右看,后行断言从右往左看
     *
     *     10.反向后行断言
     *          (?<!表达式)(?!表达式)
     *
     * -----------------------------------------------------------------------------------------------
     *  JDK8的其他新特性
     *      1.方法的引用
     *          所谓的方法引用,就是将现存的方法直接拿过来,代替函数式接口的匿名内部类,或者代替Lambda表达式
     *      要创建一个接口的实现类对象
     *          1.定义一个实习类实现接口,创建该实现类对象
     *          2.直接创建该接口的匿名内部类
     *          3.使用Lambda代替接口的匿名内部类
     *          4.使用方法引进直接将现存方法引用过来
     *      2.方法引用的基本格式:
     *          方法的所有者::方法名
     *      a.通过类引用其中的静态方法
     *              类名::静态方法名
     *      b.通过对象引用其中的非静态方法
     *              对象名::非静态方法
     *      c.通过类引用它的构造方法
     *              类名::new
     *      d.通过数组引用他的构造方法
     *              数据类型[]::new
     *
     *-----------------------------------------------------------------------------------------------
     *  Base64
     *      1.什么是Base64
     *          Base64是一种编码算法,可以把一串字符串"编码"称为另外一个字符串
     *      2.Base64内嵌类和方法
     *          Base64有三个内部类,分别是:
     *              普通字符串 编码的类 (Encoder,Decoder)
     *              URL字符串  编码的类 (URLEncoder,URLDecoder)
     *              MIME类型字符串 编码的类 (MIMEEncoder,MIMEDecoder)
     *      3.他们共有的方法
     *          public String encoderToString(byte[] bs) 解码
     *          public byte[] decode(String str) 解码
     *
     * -----------------------------------------------------------------------------------------------
     *  正则表达式
     *      1.概念:
     *          正则表达式其实也是一个字符串,其内容表示某个规则
     *
     *      2.
     *
     *
     *
     */
    public static void main(String[] args) {

    }
}
